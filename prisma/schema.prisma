// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model ip_data {
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId
    ip                 String
    city               String
    region             String
    regionCode         String   @map("region_code")
    countryCode        String   @map("country_code")
    countryCodeIso3    String   @map("country_code_iso3")
    countryName        String   @map("country_name")
    countryCapital     String   @map("country_capital")
    countryTld         String   @map("country_tld")
    continentCode      String   @map("continent_code")
    inEu               Boolean  @map("in_eu")
    postal             String
    latitude           Float
    longitude          Float
    timezone           String
    utcOffset          String   @map("utc_offset")
    countryCallingCode String   @map("country_calling_code")
    currency           String
    currencyName       String   @map("currency_name")
    languages          String
    asn                String
    org                String
    firstSeen          Int      @map("first_seen")
    lastSeen           Int?
    error              Boolean?
    reason             String?
    message            String?
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
